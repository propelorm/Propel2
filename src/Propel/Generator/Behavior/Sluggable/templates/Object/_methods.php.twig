{% if 'slug' != behavior.parameter('slug_column') %}
    /**
     * Wrap the setter for slug value
     *
     * @param   string
     * @return  {{ builder.table.phpName }}
     */
    public function setSlug($v)
    {
        return $this->{{ behavior.columnSetter }}($v);
    }

    /**
     * Wrap the getter for slug value
     *
     * @return  string
     */
    public function getSlug()
    {
        return $this->{{ behavior.columnGetter }}();
    }
{% endif %}

/**
 * Create a unique slug based on the object
 *
 * @return string The object slug
 */
protected function createSlug()
{
    $slug = $this->createRawSlug();
    $slug = $this->limitSlugSize($slug);
    $slug = $this->makeSlugUnique($slug);

    return $slug;
}

/**
 * Create the slug from the appropriate columns
 *
 * @return string
 */
protected function createRawSlug()
{
    {% if behavior.parameter('slug_pattern') != '' %}
        return '{{ behavior.parameter('slug_pattern')|replace({'{': '\' . $this->cleanupSlugPart($this->get', '}': '()) . \''}) }}';
    {% else %}
        return $this->cleanSligPart($this->__toString());
    {% endif %}
}

/**
 * Cleanup a string to make a slug of it
 * Removes special characters, replaces blanks with a separator, and trim it
 *
 * @param     string $slug        the text to slugify
 * @param     string $replacement the separator used by slug
 * @return    string               the slugified text
 */
protected static function cleanupSlugPart($slug, $replacement = '{{ behavior.parameter('replacement') }}')
{
    // transliterate
    if (function_exists('iconv')) {
        $slug = iconv('utf-8', 'us-ascii//TRANSLIT', $slug);
    }

    // lowercase
    if (function_exists('mb_strtolower')) {
        $slug = mb_strtolower($slug);
    } else {
        $slug = strtolower($slug);
    }

    // remove accents resulting from OSX's iconv
    $slug = str_replace(array('\'', '`', '^'), '', $slug);

    // replace non letter or digits with separator
    $slug = preg_replace('{{ behavior.parameter('replace_pattern') }}', $replacement, $slug);

    // trim
    $slug = trim($slug, $replacement);

    if (empty($slug)) {
        return 'n-a';
    }

    return $slug;
}


/**
 * Make sure the slug is short enough to accommodate the column size
 *
 * @param    string $slug            the slug to check
 *
 * @return string                        the truncated slug
 */
protected static function limitSlugSize($slug, $incrementReservedSpace = 3)
{
    // check length, as suffix could put it over maximum
    if (strlen($slug) > ({{ behavior.columnForParameter('slug_column').size }} - $incrementReservedSpace)) {
        $slug = substr($slug, 0, {{ behavior.columnForParameter('slug_column').size }} - $incrementReservedSpace);
    }

    return $slug;
}


/**
 * Get the slug, ensuring its uniqueness
 *
 * @param    string $slug            the slug to check
 * @param    string $separator the separator used by slug
 * @return string                        the unique slug
 */
protected function makeSlugUnique($slug, $separator = '{{ behavior.columnForParameter('separator') }}', $increment = 0)
{
    $slug2 = empty($increment) ? $slug : $slug . $separator . $increment;
    $slugAlreadyExists = {{ builder.queryClassName }}::create()
        ->filterBySlug($slug2)
        ->prune($this)

        {% if behavior.parameter('scope_column') != '' %}
             ->filterBy('{{ behavior.columnForParameter('scope_column').phpName }}', $this->{{ 'get' ~ behavior.columnForParameter('scope_column').phpName }}())
        {% endif %}

        {% if behavior.table.hasBehavior('soft_delete') %}
            /* watch out: some of the columns may be hidden by the soft_delete behavior */
            ->includeDeleted()
        {% endif %}
        ->count();

    if ($slugAlreadyExists) {
        return $this->makeSlugUnique($slug, $separator, ++$increment);
    } else {
        return $slug2;
    }
}