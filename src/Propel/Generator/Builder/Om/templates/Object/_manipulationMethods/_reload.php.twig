/**
 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
 *
 * This will only work if the object has been saved and has a valid primary key set.
 *
 * @param      boolean \$deep (optional) Whether to also de-associated any related objects.
 * @param      ConnectionInterface \$con (optional) The ConnectionInterface connection to use.
 * @return void
 * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
 */
public function reload($deep = false, ConnectionInterface $con = null)
{
    if ($this->isDeleted()) {
        throw new PropelException("Cannot reload a deleted object.");
    }

    if ($this->isNew()) {
        throw new PropelException("Cannot reload an unsaved object.");
    }

    if ($con === null) {
        $con = Propel::getServiceContainer()->getReadConnection({{ builder.tableMapClass }}::DATABASE_NAME);
    }

    // We don't need to alter the object instance pool; we're just modifying this instance
    // already in the pool.

    $dataFetcher = {{ builder.queryClassName }}::create(null, $this->buildPkeyCriteria())->setFormatter(ModelCriteria::FORMAT_STATEMENT)->find($con);
    $row = $dataFetcher->fetch();
    $dataFetcher->close();
    if (!$row) {
        throw new PropelException('Cannot find matching row in the database to reload object values.');
    }
    $this->hydrate($row, 0, true, $dataFetcher->getIndexType()); // rehydrate

    {% for column in builder.table.columns %}
        {% if column.lazyLoad %}
            // Reset the $clo lazy-load column
            $this->{{ column.name|lower }} = null;
            $this->{{ column.name|lower }}_isLoaded = false;
        {% endif %}
    {% endfor %}

    if ($deep) {  // also de-associate any related objects?
        {% for fk in builder.table.foreignKeys %}
            $this->{{ builder.fkVarName(fk) }} = null;
        {% endfor %}

        {% for refFk in builder.table.referrers %}
            {% if refFk.localPrimaryKey %}
                $this->{{ builder.pKRefFKVarName(refFk) }} = null;
            {% else %}
                $this->{{ builder.refFKCollVarName(refFk) }} = null;
            {% endif %}
        {% endfor %}

        {% for fkList in builder.table.crossFks %}
            $this->{{ builder.crossFKVarName(fkList[1]) }} = null;
        {% endfor %}
    }
}